@startuml

class abc.ABCMeta <<metaclass>>

package event {
    abstract class TaskConfig {
        + {static} trigger_type
        + trigger_args: any
        + command_args: [str]
        + {abstract} get_run_date(): datetime
        + {abstract} get_next_date(): datetime
    }
    TaskConfig --u|> models.TaskConfigModel

    class CronTaskConfig {
        +get_run_date(): datetime
        +get_next_date(): datetime
    }
    class IntervalTaskConfig{
        +get_run_date(): datetime
        +get_next_date(): datetime
    }
    class DateTaskConfig{
        +get_run_date(): datetime
        +get_next_date(): datetime
    }
    CronTaskConfig     -u[dashed]-|> TaskConfig
    IntervalTaskConfig -u[dashed]-|> TaskConfig
    DateTaskConfig     -u[dashed]-|> TaskConfig

    class TaskConfigs {
        - _config_types = [TaskConfig]
        - {static} _get_query_for_cls(session, cls): [TaskConfig]
        + fetch(session): Generator[TaskConfig]
    }
    TaskConfigs -u[dashed]-> CronTaskConfig
    TaskConfigs -u[dashed]-> IntervalTaskConfig
    TaskConfigs -u[dashed]-> DateTaskConfig
    TaskConfigs -l[dashed]-> connection.Session
}

package connection {
    class Session
    class session_scope <<contextmanager>>
    Session -[dashed]-> engine
    session_scope -[dashed]> Session
}

package models {
    class Base
    Base -[dashed]l> DeclarativeABCMeta

    class TaskConfigModel {
        + {static} task_config_id: Column
        + {static} trigger_type: Column
        + {static} trigger_args: Column
        + {static} command_args: Column
    }
    TaskConfigModel .-u|> Base

    class DeclarativeABCMeta <<metaclass>>
    DeclarativeABCMeta --u|> abc.ABCMeta
}


package executor {
    class TaskExecutor {
        - _task_config: TaskConfig
        - _loop: EventLoop
        - _next_run_date_it: Iterator[Datetime]
        - _timer_handle: TimerHandle

        + run()
        + stop()
        - _get_next_run_ts(): float
        - _run_iteration()
        - _execute_process(): int
    }

    class TaskManager {
        + {r/o} task_dict: Dict[int, TaskExecutor]
        + add_tasK(TaskConfig)
        + run_task(int)
        + run_all()
        + stop_task(int)
        + stop_all()
    }
    TaskManager "1" --l* "n" TaskExecutor
}
TaskExecutor "1" .-o "1" TaskConfig
TaskManager .-> TaskConfig

@enduml