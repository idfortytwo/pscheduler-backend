@startuml

class abc.ABCMeta <<metaclass>>

package scheduler.task {
    abstract class Task {
        + command: str
        + trigger_args: any
        + {abstract} run_date_iter: Iterator[datetime]
        + to_dict(): Dict
    }
    Task --r|> db.models.TaskModel
    Task .--> abc.ABCMeta

    class CronTask {
        + run_date_iter: Iterator[datetime]
    }
    class IntervalTask{
        + run_date_iter: Iterator[datetime]
        + <<r/o>> interval: timedelta
        + {static} validate(int): bool
    }
    class DateTask{
        + run_date_iter: Iterator[datetime]
    }
    CronTask     .-u|> Task
    IntervalTask .-u|> Task
    DateTask     .-u|> Task

    class TaskFactory {
        - {static} _trigger_type_mapping = Dict[str, Type[Task]]
        - {static} _get_class(str): Type[Task]
        + {static} create(str, str, str): Task
        + {static} create_from_kwargs(str, str, Dict): Task
    }
    TaskFactory .-u> CronTask
    TaskFactory .-u> IntervalTask
    TaskFactory .-u> DateTask
}

class db.connection.Session
class db.connection.engine
db.connection.Session "*" o. "1" db.connection.engine

package db.models {
    class Base
    Base .r> DeclarativeABCMeta

    class ProcessLog {
        + {static} process_log_id: Column
        + {static} task_id: Column
        + {static} status: Column
        + {static} start_date: Column
        + {static} finish_date: Column
        + {static} return_code: Column
    }


    abstract class OutputLog {
        + {static} output_log_id: Column
        + {static} process_log_id: Column
        + {static} message: Column
        + {static} time: Column
        + to_dict(): Dict
    }
    OutputLog .-u|> Base
    OutputLog .--u> abc.ABCMeta

    class StdoutLog
    class StderrLog
    StdoutLog .-u|> OutputLog
    StderrLog .-u|> OutputLog

    class TaskModel {
        + {static} task_id: Column
        + {static} command: Column
        + {static} trigger_type: Column
        + {static} trigger_args: Column
    }

    ProcessLog .-u|> Base
    TaskModel .-|> Base

    class DeclarativeABCMeta <<metaclass>>
    DeclarativeABCMeta --|> abc.ABCMeta
}

package scheduler.executor {
    class TaskExecutor {
        + status: str
        + <<r/o>> task: Task
        + <<r/o>> active: bool
        - _timer_handle: TimerHandle
        - _loop: EventLoop

        + run()
        + stop()
        - _switch_on()
        - _switch_off()
        - _sched_next_run_and_switch(): Union[TimerHandle, None]
        - _get_next_run_ts(): Union[float, None]
        - _calc_next_run_ts_until_not_missed(): float
        - _get_loop_relative_current_ts(): float
        - _get_event_loop_base_time(): datetime
        - _calc_next_run_ts(datetime): float
        - _log_missed_run(datetime)
        - _update_status(str)
        + to_dict(): Dict
    }
    TaskExecutor *.-r ExecutionMonitor
    TaskExecutor "1" *.---u "1" db.models.ProcessLog

    class ExecutionMonitor {
        - _task: Task
        - _status_callback: Callable
        + start(): int
        - _log_start()
        - _execute_process(): int
        - _yield_stdout_logs(Process): AsyncGenerator[StdoutLog]
        - _yield_stderr_logs(Process): AsyncGenerator[StderrLog]
        - _yield_output_logs(Process): AsyncGenerator[StdoutLog, StderrLog]
        - _log_end(int)
        - _log_finish()
        - _log_finish(int)
    }
    ExecutionMonitor "1" *.---u "*" db.models.StdoutLog
    ExecutionMonitor "1" *.---u "*" db.models.StderrLog

    class ExecutionManager {
        + task_executors: Dict[int, TaskExecutor]
        + sync()
        + run_task(int)
        + run_all()
        + stop_task(int)
        + stop_all()
        - _update_db_tasks(List[Task])
        - _add_task(Task)
        - _update_task(TaskExecutor, Task)
        - _delete_db_tasks(List[Task])
    }

    TaskFactory *. db.connection.Session
    ExecutionMonitor *.--d db.connection.Session
    ExecutionManager *.-- db.connection.Session
    ExecutionManager "1" *.--r "*" TaskExecutor
}

package db.dal {
    class DAL {
        + session: AsyncSession
        + execution_manager: ExecutionManager
        + get_tasks(): List[Task]
        + get_task(int): Task
        + add_task(TaskInputModel)
        + delete_task(int)
        + update_task(int, TaskInputModel)
        + get_process_logs(): List[ProcessLog]
        + get_process_log(int): ProcessLog
        + get_output_logs(int, int): List[OutputLog]
    }

    DAL "*" *.---l "1" db.connection.Session
    DAL "*" o.---- "1" ExecutionManager
    DAL o.-u db.models.ProcessLog
    DAL o.-u db.models.OutputLog
    DAL o.-d api.models.TaskInputModel
}

class api.models.TaskInputModel {
    + {static} task_id: Optional[int]
    + {static} command: str
    + {static} trigger_type: str
    + {static} trigger_args: Union[str, Dict]
}

package api.app {
    class FastAPI {
        app
    }
    class Config {
        config
    }
    class Server {
        server
    }

    Server o-r Config
    Config o-r FastAPI
}

package api.routers {
    class task_router {
        + get_tasks(DAL)
        + get_task(DAL, int)
        + add_task(DAL, TaskInputModel)
        + delete_task(DAL, int)
        + update_task(DAL, int, TaskInputModel)
    }

    class task_executor_router {
        + get_executors()
        + get_executor(int)
        + stop_executor(int)
    }

    class log_router {
        + get_process_logs(DAL)
        + get_output_logs(DAL, int, Optional[int])
    }

    task_executor_router .r-o ExecutionManager
    task_router o.-u api.models.TaskInputModel
}

FastAPI o.-u task_executor_router
FastAPI o.-u task_router
FastAPI o.-u log_router

task_router          "1" *.-u "1" DAL
task_executor_router "1" *.-u "1" DAL
log_router           "1" *.-u "1" DAL


package util {
    class SingletonMeta {
        - _instances: Dict[Type, object]
        + __call__(Type, ...): object
    }

    class TaskOutputLogger {
        - _loop: EventLoop
        - _buffer: Deque[StdoutLog]
        + log(StdoutLog)
        + flush()
        - _flush_periodically(int)
    }
    TaskOutputLogger "1" *.- "1" db.connection.Session
    TaskOutputLogger "1" .--* "1" TaskExecutor
    TaskOutputLogger "1" .--* "1" ExecutionMonitor

    SingletonMeta .--l> TaskOutputLogger
    ExecutionManager .u> SingletonMeta
}

class main {}
main "1" *.- "1" Server
main "1" *.-u "1" ExecutionManager

@enduml